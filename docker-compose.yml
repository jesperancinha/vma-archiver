version: "3.7"
services:
  jofisaes_vma_postgres_1:
    container_name: ${PROJECT_NAME}_postgres_1
    hostname: jofisaes-vma-postgres-1
    restart: on-failure
    build:
      context: ./docker-images/psql/.
    ports:
      - "5433:5432"
    volumes:
      - ./docker-images/psql/init-scripts:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_DATABASE}
      - VMA_ETCD_IP=${VMA_ETCD_IP}
      - POSTGRES_MAIN_IP=${POSTGRES_1_IP}
      - POSTGRES_SECOND_IP=${POSTGRES_2_IP}
      - POSTGRES_THIRD_IP=${POSTGRES_3_IP}
      - POSTGRES_NUMBER=1
    expose:
      - ${PG_EXPOSED_PORT}
    networks:
      vma_net:
        ipv4_address: ${POSTGRES_1_IP}

  jofisaes_vma_postgres_2:
    container_name: ${PROJECT_NAME}_postgres_2
    hostname: jofisaes-vma-postgres-2
    restart: on-failure
    build:
      context: ./docker-images/psql/.
    ports:
      - "5434:5432"
    volumes:
      - ./docker-images/psql/init-scripts:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_DATABASE}
      - VMA_ETCD_IP=${VMA_ETCD_IP}
      - POSTGRES_MAIN_IP=${POSTGRES_2_IP}
      - POSTGRES_SECOND_IP=${POSTGRES_1_IP}
      - POSTGRES_THIRD_IP=${POSTGRES_3_IP}
      - POSTGRES_NUMBER=2
    expose:
      - ${PG_EXPOSED_PORT}
    networks:
      vma_net:
        ipv4_address: ${POSTGRES_2_IP}

  jofisaes_vma_postgres_3:
    container_name: ${PROJECT_NAME}_postgres_3
    hostname: jofisaes-vma-postgres-3
    restart: on-failure
    build:
      context: ./docker-images/psql/.
    ports:
      - "5435:5432"
    volumes:
      - ./docker-images/psql/init-scripts:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_DATABASE}
      - VMA_ETCD_IP=${VMA_ETCD_IP}
      - POSTGRES_MAIN_IP=${POSTGRES_3_IP}
      - POSTGRES_SECOND_IP=${POSTGRES_1_IP}
      - POSTGRES_THIRD_IP=${POSTGRES_2_IP}
      - POSTGRES_NUMBER=3
    expose:
      - ${PG_EXPOSED_PORT}
    networks:
      vma_net:
        ipv4_address: ${POSTGRES_3_IP}

  jofisaes_vma_haproxy_lb:
    container_name: jofisaes_vma_haproxy_lb
    hostname: jofisaes_vma_haproxy_lb
    build: docker-images/haproxy/.
    ports:
      - "5000:5000"
      - "5001:5001"
      - "7000:7000"
    expose:
      - 5001
      - 5000
      - 7000
    networks:
      vma_net:
        ipv4_address: ${VMA_HA_PROXY_IP}
    environment:
      - POSTGRES_1_IP=${POSTGRES_1_IP}
      - POSTGRES_2_IP=${POSTGRES_2_IP}
      - POSTGRES_3_IP=${POSTGRES_3_IP}
      - POSTGRES_EXPOSED_PORT=${PG_EXPOSED_PORT}

  jofisaes_vma_backend_img_1:
    hostname: jofisaes_vma_backend_img_1
    container_name: jofisaes_vma_backend_img_1
    build:
      context: vma-service-backend/.
    ports:
      - "8081"
    environment:
      - VMA_BACKEND_PROFILE=docker,starter
      - VMA_PORT=8081
      - VMA_HA_PROXY_IP=${VMA_HA_PROXY_IP}
      - VMA_SCHEMA_REGISTRY=${VMA_SCHEMA_REGISTRY}
    restart: on-failure
    deploy:
      resources:
        limits:
          memory: 200M
        reservations:
          memory: 200M
    networks:
      vma_net:
        ipv4_address: ${VMA_BACKEND_1}

  jofisaes_vma_backend_img_2:
    hostname: jofisaes_vma_backend_img_2
    container_name: jofisaes_vma_backend_img_2
    build:
      context: vma-service-backend/.
    ports:
      - "8082"
    environment:
      - VMA_BACKEND_PROFILE=docker
      - VMA_PORT=8082
      - VMA_HA_PROXY_IP=${VMA_HA_PROXY_IP}
      - VMA_SCHEMA_REGISTRY=${VMA_SCHEMA_REGISTRY}
    restart: on-failure
    deploy:
      resources:
        limits:
          memory: 200M
        reservations:
          memory: 200M
    networks:
      vma_net:
        ipv4_address: ${VMA_BACKEND_2}

  jofisaes_vma_nginx_lb:
    hostname: jofisaes_vma_nginx_lb
    container_name: jofisaes_vma_nginx_lb
    build:
      context: ./docker-images/nginx/.
    ports:
      - "8080:8080"
    restart: on-failure
    deploy:
      resources:
        limits:
          memory: 300M
        reservations:
          memory: 300M
    env_file:
      - .env
    networks:
      vma_net:
        ipv4_address: ${VMA_NGINX_IP}

  jofisaes_vma_etcd:
    image: 'bitnami/etcd:latest'
    container_name: jofisaes_${PROJECT_NAME}_etcd
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://${VMA_ETCD_IP}:2379
      - ETCD_ENABLE_V2=true
    ports:
      - "2379:2379"
      - "2380:2380"
    restart: on-failure
    networks:
      vma_net:
        ipv4_address: ${VMA_ETCD_IP}

  jofisaes_vma_zookeeper:
    image: confluentinc/cp-zookeeper:5.4.0
    hostname: jofisaes_vma_zookeeper
    container_name: jofisaes_vma_zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      vma_net:
        ipv4_address: ${VMA_ZOOKEEPER}

  jofisaes_vma_broker:
    image: confluentinc/cp-server:5.4.0
    hostname: jofisaes_vma_broker
    container_name: jofisaes_vma_broker
    depends_on:
      - jofisaes_vma_zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    expose:
      - 9092
      - 29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "${VMA_ZOOKEEPER}:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://jofisaes_vma_broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://jofisaes_vma_broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: ${VMA_KAFKA}:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: ${VMA_ZOOKEEPER}:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: "true"
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
      CONTROL_CENTER_SCHEMA_REGISTRY_SR1_URL: https://schemaregistry:8088
    networks:
      vma_net:
        ipv4_address: ${VMA_KAFKA}

  jofisaes_schemaregistry:
    image: confluentinc/cp-schema-registry:5.4.0
    container_name: jofisaes_schemaregistry
    restart: always
    depends_on:
      - jofisaes_vma_broker
    volumes:
      - ./scripts/security:/etc/kafka/secrets
      - ./scripts/security/keypair:/tmp/conf
    ports:
      - "8088:8088"
    environment:
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8088
      SCHEMA_REGISTRY_HOST_NAME: localhost
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: ${VMA_KAFKA}:29092
    networks:
      vma_net:
        ipv4_address: ${VMA_SCHEMA_REGISTRY}

  jofisaes_vma_listener_1:
    hostname: jofisaes_vma_listener_1
    container_name: jofisaes_vma_listener_1
    build:
      context: vma-service-event-listener/.
    environment:
      - VMA_PORT=9001
      - VMA_SCHEMA_REGISTRY=${VMA_SCHEMA_REGISTRY}
      - VMA_HA_PROXY_IP=${VMA_HA_PROXY_IP}
    restart: on-failure
    deploy:
      resources:
        limits:
          memory: 200M
        reservations:
          memory: 200M
    networks:
      vma_net:
        ipv4_address: ${VMA_LISTENER_1}

  jofisaes_vma_listener_2:
    hostname: jofisaes_vma_listener_2
    container_name: jofisaes_vma_listener_2
    build:
      context: vma-service-event-listener/.
    environment:
      - VMA_PORT=9002
      - VMA_SCHEMA_REGISTRY=${VMA_SCHEMA_REGISTRY}
      - VMA_HA_PROXY_IP=${VMA_HA_PROXY_IP}
    restart: on-failure
    deploy:
      resources:
        limits:
          memory: 200M
        reservations:
          memory: 200M
    networks:
      vma_net:
        ipv4_address: ${VMA_LISTENER_2}

networks:
  vma_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: ${NETWORK_SUBNET}
