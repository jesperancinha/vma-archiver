version: "3.7"
services:
  jofisaes_vma_postgres_1:
    container_name: ${PROJECT_NAME}_postgres_1
    hostname: jofisaes-vma-postgres
    build:
      context: ./docker-images/psql/.
    ports:
      - "5434:5432"
    env_file:
      - ./docker-images/psql/.env
    volumes:
      - ./docker-images/psql/init-scripts:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_MULTIPLE_DATABASES=vma
    expose:
      - ${PG_EXPOSED_PORT}
    networks:
      vma_net:
        ipv4_address: ${POSTGRES_1_IP}


  jofisaes_vma_postgres_2:
    container_name: ${PROJECT_NAME}_postgres_2
    hostname: jofisaes-vma-postgres
    build:
      context: ./docker-images/psql/.
    ports:
      - "5433:5432"
    env_file:
      - ./docker-images/psql/.env
    volumes:
      - ./docker-images/psql/init-scripts:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_MULTIPLE_DATABASES=vma
    expose:
      - ${PG_EXPOSED_PORT}
    networks:
      vma_net:
        ipv4_address: ${POSTGRES_2_IP}

  jofisaes_vma_haproxy_lb:
    container_name: jofisaes_vma_haproxy_lb
    build: docker-images/haproxy/.
    ports:
      - "5000:5000"
    expose:
      - 5000
    networks:
      vma_net:
        ipv4_address: ${HA_PROXY_IP}
    environment:
      - POSTGRES_1_IP=${POSTGRES_1_IP}
      - POSTGRES_2_IP=${POSTGRES_2_IP}
      - POSTGRES_EXPOSED_PORT=${PG_EXPOSED_PORT}

  jofisaes_vma_backend_img_1:
    hostname: jofisaes_vma_backend_img_1
    container_name: jofisaes_vma_backend_img_1
    build:
      context: vma-service-backend/.
    ports:
      - "8081"
    environment:
      - VMA_PORT=8081
    restart: on-failure
    deploy:
      resources:
        limits:
          memory: 200M
        reservations:
          memory: 200M
    networks:
      vma_net:
        ipv4_address: ${VMA_BACKEND_1}

  jofisaes_vma_backend_img_2:
    hostname: jofisaes_vma_backend_img_2
    container_name: jofisaes_vma_backend_img_2
    build:
      context: vma-service-backend/.
    ports:
      - "8082"
    environment:
      - VMA_PORT=8082
    restart: on-failure
    deploy:
      resources:
        limits:
          memory: 200M
        reservations:
          memory: 200M
    networks:
      vma_net:
        ipv4_address: ${VMA_BACKEND_2}

  jofisaes_vma_backend_img_3:
    hostname: jofisaes_vma_backend_img_3
    container_name: jofisaes_vma_backend_img_3
    build:
      context: vma-service-backend/.
    ports:
      - "8083"
    environment:
      - VMA_PORT=8083
    restart: on-failure
    deploy:
      resources:
        limits:
          memory: 200M
        reservations:
          memory: 200M
    networks:
      vma_net:
        ipv4_address: ${VMA_BACKEND_3}

  jofisaes_vma_nginx_lb:
    hostname: jofisaes_vma_nginx_lb
    container_name: jofisaes_vma_nginx_lb
    build:
      context: ./docker-images/nginx/.
    ports:
      - "8080:8080"
    restart: on-failure
    deploy:
      resources:
        limits:
          memory: 300M
        reservations:
          memory: 300M
    env_file:
      - .env
    networks:
      vma_net:
        ipv4_address: ${VMA_NGINX_IP}

networks:
  vma_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: ${NETWORK_SUBNET}
